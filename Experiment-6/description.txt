Title: Interactive SVG Drawing Tool with Mouse Event Handlers
Objective
Design and build a web-based drawing tool using SVG, where users can draw freehand shapes interactively with their mouse.
This task enhances understanding of JavaScript DOM manipulation, SVG element creation, and event-driven programming for dynamic web applications.

FIELD: SVG Drawing Area
Requirement: Provide an SVG region that acts as the drawing canvas.

Behavior:
When the user presses the mouse button inside the SVG and drags, a freehand path is drawn.
Releasing the mouse ends the drawing action.

Valid Scenario:
SVG is visible with a light background, bordered, and sized to 500×300 pixels.
Cursor changes to crosshair, indicating drawing mode.

FIELD: Container & Heading
Requirement: Present the drawing tool inside a styled container with a clear title.

Behavior:
Heading (<h3>SVG Drawing Tool</h3>) labels the tool.
The container groups the SVG canvas, providing padding and border for clarity.

Valid Scenario:
A simple, readable layout with a visible heading above the SVG.
The container keeps the tool compact and visually separated from other content.

STRUCTURE
Requirement: The page must include a heading, an SVG canvas, and JavaScript logic to handle drawing.

Valid Structure:
Heading: <h3> labels the tool.
Canvas: <svg id="drawingArea"> serves as the drawing area.
CSS: Provides layout, borders, background, and cursor styling.
JavaScript: Implements interactive drawing behavior.

CODE BEHAVIOR OVERVIEW
Element: body (Page Layout)
Contains the container, heading, and SVG.

Uses a clean font (Arial) and margin for readability.
Element: .container (UI Grouping)
Purpose: Visually groups the tool.

Effects: Solid border, padding, and inline-block display for tidy layout.

Element: svg#drawingArea (Canvas)
Purpose: Interactive drawing surface.

Properties & Effects:
Fixed size: 500×300.
Light background and border for contrast.
Cursor set to crosshair to indicate drawing functionality.
JavaScript Functionality
Purpose: Enable freehand drawing by dynamically creating and updating an SVG <path> as the mouse moves.

Process:

Element Selection:
Retrieve the SVG element with document.getElementById("drawingArea").

Maintain two state variables:
drawing → Boolean to track if the mouse is pressed.
currentPath → Reference to the current <path>.
Start Drawing (mousedown):
Set drawing = true.

Calculate mouse position relative to the SVG using getBoundingClientRect().
Create a new <path> with namespace http://www.w3.org/2000/svg.

Set attributes:
Stroke = blue
Stroke width = 2
Fill = none
d = M x y (move to starting point).
Append the path to the SVG.

Continue Drawing (mousemove):

If drawing === true:
Append L x y (line to current position) to the path’s "d" attribute.
Path updates continuously, following the mouse.

Stop Drawing (mouseup):
Set drawing = false.
Clear currentPath to end the stroke.
Edge Case Handling (mouseleave):
If the cursor leaves the SVG while drawing, stop drawing.
Prevents unintended extra lines.

Valid Scenarios
Press → Drag → Release = Creates a single freehand stroke.
Multiple strokes can be drawn without refreshing the page.
Exiting the SVG mid-draw safely ends the stroke.

Styling Overview (CSS)
Body: Clean font (Arial), outer margin for spacing.

Container: Solid border + padding for grouping.

SVG Canvas:
Border + light background for visibility.
Fixed size (500×300).
Cursor set to crosshair for drawing feedback.

Learning Outcomes
Linked HTML, CSS, and JavaScript into one interactive project.
Used SVG namespace (createElementNS) to create vector graphics dynamically.
Implemented event handling (mousedown, mousemove, mouseup, mouseleave) for real-time interactivity.
Practiced state management with drawing and currentPath.
Learned how to update an SVG path’s "d" attribute incrementally to render freehand drawings.

